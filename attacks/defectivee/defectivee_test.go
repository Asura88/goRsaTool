package defectivee

import (
	"testing"

	"github.com/sourcekris/goRsaTool/keys"
	"github.com/sourcekris/goRsaTool/ln"
	fmp "github.com/sourcekris/goflint"
)

func TestAttack(t *testing.T) {
	tt := []struct {
		name    string
		n       *fmp.Fmpz
		p       *fmp.Fmpz
		e       *fmp.Fmpz
		ct      *fmp.Fmpz
		kpt     []byte
		want    string
		wantErr bool
	}{
		{
			name: "valid test case should get ciphertext",
			n:    ln.FmpString("168272588646770966877299988249949386707730640776720529400931912376687869273888817277014902477908929418867183677528815678576475469941650076986589240977287539474147398609072130842805456080239193915659119341791091450526391012975537938548738613273826665145980658413212111508448978246386654194004067968706171374073"),
			p:    ln.FmpString("13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659"),
			e:    ln.FmpString("100"),
			ct:   ln.FmpString("2536072596735405513004321180336671392201446145691544525658443473848104743281278364580324721238865873217702884067306856569406059869172045956521348858084998514527555980415205217073019437355422966248344183944699168548887273804385919216488597207667402462509907219285121314528666853710860436030055903562805252516"),
			kpt:  []byte("easyctf{"),
			want: "easyctf{m0dul4r_fuN!}",
		},
		{
			name:    "test case without 1 prime should fail",
			n:       ln.FmpString("168272588646770966877299988249949386707730640776720529400931912376687869273888817277014902477908929418867183677528815678576475469941650076986589240977287539474147398609072130842805456080239193915659119341791091450526391012975537938548738613273826665145980658413212111508448978246386654194004067968706171374073"),
			e:       ln.FmpString("100"),
			ct:      ln.FmpString("2536072596735405513004321180336671392201446145691544525658443473848104743281278364580324721238865873217702884067306856569406059869172045956521348858084998514527555980415205217073019437355422966248344183944699168548887273804385919216488597207667402462509907219285121314528666853710860436030055903562805252516"),
			kpt:     []byte("easyctf{"),
			want:    "easyctf{m0dul4r_fuN!}",
			wantErr: true,
		},
		{
			name:    "test case without kpt should fail",
			n:       ln.FmpString("168272588646770966877299988249949386707730640776720529400931912376687869273888817277014902477908929418867183677528815678576475469941650076986589240977287539474147398609072130842805456080239193915659119341791091450526391012975537938548738613273826665145980658413212111508448978246386654194004067968706171374073"),
			p:       ln.FmpString("13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659"),
			e:       ln.FmpString("100"),
			ct:      ln.FmpString("2536072596735405513004321180336671392201446145691544525658443473848104743281278364580324721238865873217702884067306856569406059869172045956521348858084998514527555980415205217073019437355422966248344183944699168548887273804385919216488597207667402462509907219285121314528666853710860436030055903562805252516"),
			want:    "easyctf{m0dul4r_fuN!}",
			wantErr: true,
		},
		{
			name:    "test case without ct should fail",
			n:       ln.FmpString("168272588646770966877299988249949386707730640776720529400931912376687869273888817277014902477908929418867183677528815678576475469941650076986589240977287539474147398609072130842805456080239193915659119341791091450526391012975537938548738613273826665145980658413212111508448978246386654194004067968706171374073"),
			p:       ln.FmpString("13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659"),
			e:       ln.FmpString("100"),
			kpt:     []byte("easyctf{"),
			want:    "easyctf{m0dul4r_fuN!}",
			wantErr: true,
		},
		{
			name:    "test case where e is coprime phi(n) should fail",
			n:       ln.FmpString("168272588646770966877299988249949386707730640776720529400931912376687869273888817277014902477908929418867183677528815678576475469941650076986589240977287539474147398609072130842805456080239193915659119341791091450526391012975537938548738613273826665145980658413212111508448978246386654194004067968706171374073"),
			p:       ln.FmpString("13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659"),
			e:       ln.FmpString("65537"),
			ct:      ln.FmpString("2536072596735405513004321180336671392201446145691544525658443473848104743281278364580324721238865873217702884067306856569406059869172045956521348858084998514527555980415205217073019437355422966248344183944699168548887273804385919216488597207667402462509907219285121314528666853710860436030055903562805252516"),
			kpt:     []byte("easyctf{"),
			want:    "easyctf{m0dul4r_fuN!}",
			wantErr: true,
		},
	}

	for _, tc := range tt {
		k, _ := keys.NewRSA(keys.PrivateFromPublic(&keys.FMPPublicKey{
			N: tc.n,
			E: tc.e,
		}), nil, nil, "", false)

		if tc.ct != nil {
			k.CipherText = ln.NumberToBytes(tc.ct)
		}

		if tc.kpt != nil {
			k.KnownPlainText = tc.kpt
		}

		if tc.p != nil {
			k.Key.Primes = append(k.Key.Primes, tc.p)
		}

		err := Attack([]*keys.RSA{k})
		if err != nil && !tc.wantErr {
			t.Errorf("Attack() failed: %s expected no error got error: %v", tc.name, err)
		}

		if string(k.PlainText) != tc.want && !tc.wantErr {
			t.Errorf("Attack() failed: %s got/want mismatch %s/%s", tc.name, string(k.PlainText), tc.want)
		}
	}

}

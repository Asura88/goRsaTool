package partiald

import (
	"testing"

	"github.com/sourcekris/goRsaTool/keys"
	"github.com/sourcekris/goRsaTool/ln"

	fmp "github.com/sourcekris/goflint"
)

func TestAttack(t *testing.T) {
	tt := []struct {
		name string
		n    *fmp.Fmpz
		e    *fmp.Fmpz
		d0   *fmp.Fmpz
		want *fmp.Fmpz
	}{
		{
			name: "vulnerable key expected to recover d",
			n:    ln.FmpString("86266725658010154472222150498260854400279616774050213098395416878565164876526242956140363118029222682817734939793877810373687066251419135717798470790208067237359795716101135497212416634699204681936776373465839379019316345447681561872555648288039368565708933355864105408178251290252911762833360625417663958931"),
			e:    fmp.NewFmpz(17),
			d0:   ln.FmpString("16236907796808096199887378190370937897641878399225383583505805325470329321872928979418905097533867340283374729663939981270801679402647440066523530248353305"),
			want: ln.FmpString("45670619466005375897058785557902805270736267703908936346209338347475675522866834506191956944839000243844683203420288252550775505662516013027069778653639554961706933147715435907948764515279991518139128492527575917958505935582118594306121265491344326720446163086737712339775332722701484222617246376883923744281"),
		},
	}

	for _, tc := range tt {
		k, _ := keys.NewRSA(keys.PrivateFromPublic(&keys.FMPPublicKey{N: tc.n, E: tc.e}), nil, nil, "", false)
		k.DLSB = tc.d0.Bytes()

		err := Attack([]*keys.RSA{k})
		if err != nil {
			t.Errorf("Attack() failed: %s expected no error got error: %v", tc.name, err)
		}

		got := k.Key.D
		if got.Cmp(tc.want) != 0 {
			t.Errorf("%s failed - got / want mismatched: %v / %v", tc.name, got, tc.want)
		}

	}
}

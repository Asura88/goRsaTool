package oraclemodulus

import (
	"testing"

	"github.com/sourcekris/goRsaTool/keys"
	"github.com/sourcekris/goRsaTool/ln"

	fmp "github.com/sourcekris/goflint"
)

func TestAttack(t *testing.T) {
	tt := []struct {
		name    string
		e2      string
		e3      string
		e4      string
		e9      string
		e       *fmp.Fmpz
		want    *fmp.Fmpz
		wantErr bool
	}{
		{
			name: "valid test case expected to recover modulus",
			e:    fmp.NewFmpz(65537),
			e2:   "5761668236839586109418962761799871298496731650414300111898748436645307710082042476359004741173437011528127100544857560920828776677097827029088887542183652",
			e3:   "5231820238714732280689266704215606404198271381461642023170239572359694843155898314726071988631045294959184107152461687283534562885585607482959520219058483",
			e4:   "4549828198332848589659669808111733494496790241455507073917800676264000326179335243952552030888543259523671500474398224812218021368953866920127074319142169",
			e9:   "1687551303808596719334549069672627735326938552691428168298773374393296472674332889270931912880258672133915891879022236260158771233102485352850871404694665",
			want: ln.FmpString("6176057644803740699542435800440852968215295401804934153751355359391552779158806723339253438684175344711594854501325773475294864972839236315320393819841713"),
		},
		{
			name:    "error case missing one ciphertext",
			e:       fmp.NewFmpz(65537),
			e2:      "5761668236839586109418962761799871298496731650414300111898748436645307710082042476359004741173437011528127100544857560920828776677097827029088887542183652",
			e3:      "5231820238714732280689266704215606404198271381461642023170239572359694843155898314726071988631045294959184107152461687283534562885585607482959520219058483",
			e4:      "4549828198332848589659669808111733494496790241455507073917800676264000326179335243952552030888543259523671500474398224812218021368953866920127074319142169",
			want:    ln.FmpString("6176057644803740699542435800440852968215295401804934153751355359391552779158806723339253438684175344711594854501325773475294864972839236315320393819841713"),
			wantErr: true,
		},
	}

	for _, tc := range tt {
		k, _ := keys.NewRSA(keys.PrivateFromPublic(&keys.FMPPublicKey{E: tc.e}), nil, nil, "", false)
		k.OracleCiphertexts = make(map[int]*fmp.Fmpz)

		if tc.e2 != "" {
			k.OracleCiphertexts[2] = ln.FmpString(tc.e2)
		}
		if tc.e3 != "" {
			k.OracleCiphertexts[3] = ln.FmpString(tc.e3)
		}
		if tc.e4 != "" {
			k.OracleCiphertexts[4] = ln.FmpString(tc.e4)
		}
		if tc.e9 != "" {
			k.OracleCiphertexts[9] = ln.FmpString(tc.e9)
		}

		err := Attack([]*keys.RSA{k})
		if err != nil && !tc.wantErr {
			t.Errorf("Attack() failed: %s expected no error got error: %v", tc.name, err)
		}

		if k.Key.PublicKey.N == nil && !tc.wantErr {
			t.Errorf("Attack() failed: %s n not found", tc.name)
		}
	}
}

package hastadsbroadcast

import (
	"testing"

	"github.com/sourcekris/goRsaTool/keys"
	"github.com/sourcekris/goRsaTool/ln"
	fmp "github.com/sourcekris/goflint"
)

func TestAttack(t *testing.T) {
	for _, tc := range []struct {
		name string
		r1   *fmp.Fmpz
		m1   *fmp.Fmpz
		r2   *fmp.Fmpz
		m2   *fmp.Fmpz
		r3   *fmp.Fmpz
		m3   *fmp.Fmpz
		want string
	}{
		{
			name: "large int hastads broadcast",
			r1:   ln.FmpString("112820376318708309511883266356668393396816131447182791445506209031700236878469506355658352414748854472099361508824474365112325602319862842561436679067358900089331778617100580343694334226208753320435002324108477884950933641216044198203776075918323272795752182687450526442079367110656868374931125538339145721573"),
			m1:   ln.FmpString("129114230505356333697118994510021413915051088225570531043026917550451581564734952308651566723784981323900403426111056537185011193232603296112121643742691356399992969898010827710994350803494919151948423732426591598888439712920344266205641475348312727365971717305409127667391782677854219689063549759596429716629"),
			r2:   ln.FmpString("45651293556966072304818630107703140982560165499022836594523320391474750266281527820821435052904791681898782443840766880327957385288649094238886877657228597671521358830021677304123300882210216797719566693160533018601632768048713030788957904378243453859832229603157052843135978639276611231634399594108602071349"),
			m2:   ln.FmpString("109269702205029292120022054633721536134438763741801805368759852020529400112797868566931991813909053016228871499067304592740926931055426540840268677218282537450757063806695831503892336975370479004151114020279110611956433492281834217463178735931660370487895538198474855043942908224106013915984721193047940206159"),
			r3:   ln.FmpString("7145575537980676074780210417817024536632595547590648616669010213946256431795860784357127920679439181517662499063976244238924613193503273987203026894830988537974932336129245277788828190575305229420617551083516420170192425247732269483299819348769856966536443995217830327641185916042049253075074223777360483322"),
			m3:   ln.FmpString("130184984206907873325788608067133260010668825744109785989754700869397713689450907426005869455386099782561530247238688647088683853688926890638399087109982966623800264662846723141786785531512452737825132399495839974974884122270947543684537604890177662807013640102549749593966105133111628112742472630785570141963"),
			want: "noxCTF{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}",
		},
	} {
		var ks []*keys.RSA
		ks = append(ks, &keys.RSA{
			CipherText: ln.NumberToBytes(tc.r1),
			Key: *keys.PrivateFromPublic(&keys.FMPPublicKey{
				N: tc.m1,
				E: fmp.NewFmpz(3),
			}),
		})
		ks = append(ks, &keys.RSA{
			CipherText: ln.NumberToBytes(tc.r2),
			Key: *keys.PrivateFromPublic(&keys.FMPPublicKey{
				N: tc.m2,
				E: fmp.NewFmpz(3),
			}),
		})
		ks = append(ks, &keys.RSA{
			CipherText: ln.NumberToBytes(tc.r3),
			Key: *keys.PrivateFromPublic(&keys.FMPPublicKey{
				N: tc.m3,
				E: fmp.NewFmpz(3),
			}),
		})

		if err := Attack(ks); err != nil {
			t.Errorf("%s failed - got unexpected error: %v", tc.name, err)
		}

		got := string(ks[0].PlainText)
		if got != tc.want {
			t.Errorf("%s failed - got / want mismatched: %s / %s", tc.name, got, tc.want)
		}
	}
}
